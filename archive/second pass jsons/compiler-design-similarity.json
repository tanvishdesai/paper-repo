{
    "chapter": "Compiler Design",
    "types": [
      {
        "numerical_type_id": "COMPDES-CD-TYPE-01",
        "numerical_type_name": "Compiler Phases and Structure",
        "numerical_type_description": "Questions covering the overall architecture of a compiler, including the sequence and roles of its phases (lexical analysis, parsing, etc.). This category also includes questions about the symbol table's function and its interaction with different phases.",
        "question_ids": [
          "2009-Q.17",
          "2009-Q.42",
          "2010-13",
          "2015-19",
          "2016-Q.19",
          "2017-5",
          "2018-8",
          "2020-9",
          "2023-Q.11",
          "2024-Q.21",
          "2025-Q.12"
        ]
      },
      {
        "numerical_type_id": "COMPDES-CD-TYPE-02",
        "numerical_type_name": "Lexical Analysis",
        "numerical_type_description": "Focuses on the first phase of compilation, which involves breaking down source code into a stream of tokens. These questions test knowledge of token recognition, regular expressions, finite automata, and principles like the longest match rule.",
        "question_ids": [
          "2011-Q.1",
          "2011-Q.19",
          "2018-37"
        ]
      },
      {
        "numerical_type_id": "COMPDES-CD-TYPE-03",
        "numerical_type_name": "Grammar Properties and Parser Capabilities",
        "numerical_type_description": "Theoretical questions concerning context-free grammars and the comparative power of parsing techniques. This includes identifying grammar properties like ambiguity and left recursion, and understanding the limitations and capabilities of various parsers such as LL(1), SLR, LALR, and CLR.",
        "question_ids": [
          "2010-38",
          "2014-CS-2-17",
          "2015-16",
          "2015-31",
          "2016-Q.45",
          "2017-6",
          "2021-CS-Q.5",
          "2022-Q.13",
          "2025-Q.40",
          "2025-Q.51"
        ]
      },
      {
        "numerical_type_id": "COMPDES-CD-TYPE-04",
        "numerical_type_name": "Parsing Techniques and Computations",
        "numerical_type_description": "Practical questions that require the application of parsing algorithms. These problems involve computations such as calculating FIRST and FOLLOW sets, constructing parsing tables, generating LR item sets (LR(0), SLR, LR(1)), and tracing parser actions like shift/reduce operations.",
        "question_ids": [
          "2011-Q.27",
          "2012-Q.52",
          "2012-Q.53",
          "2013-Q.9",
          "2014-34",
          "2015-Q. 13",
          "2017-17",
          "2018-38",
          "2020-24",
          "2021-CS Q.51",
          "2022-Q.29",
          "2024-Q.40",
          "2024-Q.65",
          "2025-Q.46"
        ]
      },
      {
        "numerical_type_id": "COMPDES-CD-TYPE-05",
        "numerical_type_name": "Syntax-Directed Translation and Semantic Analysis",
        "numerical_type_description": "Concerns the meaning, type-correctness, and translation of programs driven by their syntactic structure. Questions involve attribute grammars, the distinction between synthesized and inherited attributes, the evaluation of semantic rules, and type checking.",
        "question_ids": [
          "2020-33",
          "2021-CS Q.3",
          "2022-Q.65",
          "2023-Q.60",
          "2024-Q.29",
          "2025-Q.22"
        ]
      },
      {
        "numerical_type_id": "COMPDES-CD-TYPE-06",
        "numerical_type_name": "Intermediate Representation and Runtime Environment",
        "numerical_type_description": "Covers the translation of source code into intermediate forms and their management during execution. Topics include Abstract Syntax Trees (ASTs), Control Flow Graphs (CFGs), three-address code, and Static Single Assignment (SSA) form. This also includes runtime concepts like activation records, memory allocation (stack/heap), and register allocation.",
        "question_ids": [
          "2010-14",
          "2010-37",
          "2011-Q.36",
          "2012-Q.36",
          "2014-CS-2-18",
          "2014-CS-2-34",
          "2015-14",
          "2015-29",
          "2015-Q. 55",
          "2016-Q.19",
          "2017-12",
          "2017-43",
          "2017-52",
          "2021-CS Q.13",
          "2023-Q.36",
          "2024-Q.43",
          "2025-Q.52",
          "2025-Q.21"
        ]
      },
      {
        "numerical_type_id": "COMPDES-CD-TYPE-07",
        "numerical_type_name": "Code Optimization",
        "numerical_type_description": "Focuses on techniques for improving the efficiency of intermediate code. These questions test knowledge of data-flow analysis concepts like liveness analysis and available expressions, and their application in optimizations such as common subexpression elimination, dead code elimination, and constant folding.",
        "question_ids": [
          "2014-17",
          "2015-Q. 50",
          "2021-CS Q.30",
          "2021-CS Q.38",
          "2023-Q.37",
          "2025-Q.13"
        ]
      }
    ]
  }