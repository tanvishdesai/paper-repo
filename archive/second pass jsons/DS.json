{
    "chapter": "Programming and Data Structures",
    "types": [
      {
        "numerical_type_id": "CS-PDS-TYPE-01",
        "numerical_type_name": "Code Output Prediction",
        "numerical_type_description": "This question type requires tracing a given code segment, often in C, to determine its exact output. These questions test understanding of fundamental programming constructs, including pointers, arrays, recursion, static variables, and operator precedence. The main task is to simulate the program's execution and predict the final value printed to the console.",
        "question_ids": [
          "2009-Q.18",
          "2010-11",
          "2010-35",
          "2011-Q.22",
          "2011-Q.48",
          "2011-Q.49",
          "2012-Q.3",
          "2014-CS-2-10",
          "2015-7",
          "2015-15",
          "2015-26",
          "2015-38",
          "2015-39",
          "2015-48",
          "2015-54",
          "2015-Q. 11",
          "2015-Q.35",
          "2016-Q.12",
          "2016-Q.15",
          "2016-Q.35",
          "2016-Q.37",
          "2017-35",
          "2018-2",
          "2018-21",
          "2018-29",
          "2018-32",
          "2018-45",
          "2020-22",
          "2020-46",
          "2020-48",
          "2021-CS Q.10",
          "2021-CS Q.23",
          "2021-CS Q.49",
          "2022-Q.21",
          "2022-Q.43",
          "2022-Q.44",
          "2023-Q.35",
          "2023-Q.47",
          "2024-Q.13",
          "2024-Q.36",
          "2025-CS1-Q.34",
          "2025-CS1-Q.61",
          "2025-CS1-Q.63",
          "2025-CS2-Q.19",
          "2025-CS2-Q.33",
          "2025-CS2-Q.62",
          "2025-CS2-Q.63"
        ]
      },
      {
        "numerical_type_id": "CS-PDS-TYPE-02",
        "numerical_type_name": "Code Logic and Implementation",
        "numerical_type_description": "This question type focuses on the logic, behavior, and implementation details of a given piece of code or pseudocode. It includes tasks like filling in missing code to achieve a specific functionality, identifying potential run-time errors or compilation issues, or determining the overall purpose of a function. Unlike output prediction, the emphasis is on understanding the code's structure and behavior rather than just its final printout.",
        "question_ids": [
          "2010-36",
          "2012-Q.47",
          "2012-Q.48",
          "2012-Q.49",
          "2014-10",
          "2014-CS SET-3-Q.10",
          "2014-CS-2-11",
          "2014-CS-2-40",
          "2014-CS-2-42",
          "2016-Q.12",
          "2016-Q.34",
          "2017-2",
          "2017-36",
          "2017-8",
          "2021-CS Q.35",
          "2024-Q.33"
        ]
      },
      {
        "numerical_type_id": "CS-PDS-TYPE-03",
        "numerical_type_name": "Data Structure Operations and Traversal",
        "numerical_type_description": "These questions require performing a sequence of operations (e.g., insertion, deletion) on a specific data structure like a heap, binary search tree, or queue. The task is to trace the state of the data structure and determine its final configuration or the result of a specific operation. This category also includes questions on determining the sequence of nodes visited during various tree traversals (e.g., inorder, preorder, postorder).",
        "question_ids": [
          "2009-Q.60",
          "2014-CS SET-3-Q.12",
          "2014-CS-2-12",
          "2014-CS-2-39",
          "2015-12",
          "2015-13",
          "2015-19",
          "2015-31",
          "2015-Q.32",
          "2016-Q.36",
          "2018-20",
          "2020-5",
          "2022-Q.62",
          "2023-Q.59",
          "2024-Q.48",
          "2025-CS1-Q.62",
          "2025-CS2-Q.35"
        ]
      },
      {
        "numerical_type_id": "CS-PDS-TYPE-04",
        "numerical_type_name": "Data Structure Properties and Theory",
        "numerical_type_description": "This question type tests the theoretical understanding of data structures. It involves knowledge of their definitions, fundamental properties, and invariants. Questions may ask about the maximum/minimum height of a tree, the number of nodes satisfying a certain property, identifying a valid data structure from given options, or relationships between different concepts.",
        "question_ids": [
          "2009-Q.37",
          "2009-Q.59",
          "2010-10",
          "2011-Q.23",
          "2012-Q.35",
          "2014-CS-2-41",
          "2015-10",
          "2015-25",
          "2015-Q. 10",
          "2015-Q.25",
          "2016-Q.11",
          "2016-Q.34",
          "2017-6",
          "2021-CS-Q.4",
          "2022-Q.28",
          "2023-Q.12",
          "2024-Q.39",
          "2025-CS1-Q.26",
          "2025-CS1-Q.35",
          "2025-CS2-Q.13",
          "2025-CS2-Q.45"
        ]
      },
      {
        "numerical_type_id": "CS-PDS-TYPE-05",
        "numerical_type_name": "Asymptotic Complexity Analysis",
        "numerical_type_description": "This type of question focuses on the efficiency of algorithms and data structure operations. The goal is to determine the worst-case, average-case, or best-case time and space complexity using asymptotic notations like Big-O, Big-Omega, or Theta. These questions require analyzing loops, recursive calls, and sequences of operations to provide a tight upper or lower bound on performance.",
        "question_ids": [
          "2013-Q.7",
          "2016-Q.10",
          "2018-3",
          "2020-16",
          "2020-41",
          "2020-6",
          "2021-CS Q.2",
          "2021-CS-Q.10",
          "2022-Q.15",
          "2023-Q.13"
        ]
      },
      {
        "numerical_type_id": "CS-PDS-TYPE-06",
        "numerical_type_name": "Data Structure Combinatorics",
        "numerical_type_description": "These questions are more advanced and combine knowledge of data structures with combinatorial principles. The task is to count the number of possible valid data structures (like binary search trees or heaps) that can be formed from a given set of elements under specific constraints, such as a fixed height. These problems require a deeper understanding of both structural properties and counting techniques.",
        "question_ids": [
          "2011-Q.29",
          "2016-Q.40",
          "2018-46"
        ]
      }
    ]
  }