{
  "chapter": "Algorithms",
  "types": [
    {
      "numerical_type_id": "ALGO-ALGO-TYPE-01",
      "numerical_type_name": "Asymptotic & Recurrence Analysis",
      "numerical_type_description": "Analyzes algorithm efficiency using asymptotic notations like Big-O, Theta, and Omega. This category includes questions that require comparing the growth rates of different functions, solving recurrence relations to determine time complexity, and analyzing the performance of code snippets or abstract operations.",
      "question_ids": [
        "2009-Q.35",
        "2010-12",
        "2011-Q.37",
        "2012-Q.18",
        "2012-Q.5",
        "2014-12",
        "2014-42",
        "2014-CS SET-3-Q.11",
        "2014-CS-2-13",
        "2015-17",
        "2015-27",
        "2015-4",
        "2015-42",
        "2015-Q. 23",
        "2015-Q. 31",
        "2015-Q. 40",
        "2015-Q.7",
        "2016-Q.15",
        "2016-Q.39",
        "2016-Q.41",
        "2017-3",
        "2017-4",
        "2020-2",
        "2021-CS Q.39",
        "2021-CS-Q.3",
        "2022-Q.11",
        "2023-Q.29",
        "2023-Q.46",
        "2023-Q.54",
        "2025-Q.20",
        "2025-CS2-Q.20",
        "2025-CS2-Q.38"
      ]
    },
    {
      "numerical_type_id": "ALGO-ALGO-TYPE-02",
      "numerical_type_name": "Sorting & Searching",
      "numerical_type_description": "Focuses on the application, properties, and performance analysis of various sorting and searching algorithms. Questions cover topics like the number of swaps or comparisons required in worst, best, or average cases, and tracing the behavior of algorithms like Quicksort, Mergesort, and Selection Sort on given inputs.",
      "question_ids": [
        "2009-Q.11",
        "2009-Q.39",
        "2012-Q.39",
        "2013-Q.6",
        "2014-14",
        "2014-39",
        "2014-CS SET-3-Q.14",
        "2015-22",
        "2015-45",
        "2015-Q. 2",
        "2016-Q.13",
        "2016-Q.13",
        "2017-48",
        "2021-CS Q.8",
        "2021-CS-Q.2",
        "2021-CS-Q.9",
        "2025-Q.33",
        "2025-CS2-Q.41"
      ]
    },
    {
      "numerical_type_id": "ALGO-ALGO-TYPE-03",
      "numerical_type_name": "Hashing",
      "numerical_type_description": "Involves the practical application and analysis of hashing concepts. Questions typically require inserting a given set of keys into a hash table using a specific hash function and collision resolution strategy (e.g., linear probing, chaining, double hashing) and then analyzing the resulting table's state or properties.",
      "question_ids": [
        "2009-Q.36",
        "2010-52",
        "2010-53",
        "2014-40",
        "2015-17",
        "2015-33",
        "2020-23",
        "2022-Q.16",
        "2023-Q.20",
        "2025-Q.65"
      ]
    },
    {
      "numerical_type_id": "ALGO-ALGO-TYPE-04",
      "numerical_type_name": "Graph Traversals (BFS, DFS)",
      "numerical_type_description": "Tests the understanding of graph traversal algorithms like Breadth-First Search (BFS) and Depth-First Search (DFS). This includes questions on topological sorting, identifying properties of traversal trees (such as edge types and path lengths), determining recursion depth, and counting possible traversal orderings.",
      "question_ids": [
        "2014-11",
        "2014-CS SET-3-Q.13",
        "2014-CS-2-14",
        "2015-Q. 45",
        "2016-Q.11",
        "2018-30",
        "2021-CS Q.16",
        "2023-Q.56",
        "2025-Q.43",
        "2025-CS2-Q.29",
        "2025-CS2-Q.59"
      ]
    },
    {
      "numerical_type_id": "ALGO-ALGO-TYPE-05",
      "numerical_type_name": "Minimum Spanning Trees (MST)",
      "numerical_type_description": "Centers on finding and analyzing Minimum Spanning Trees (MSTs) in weighted, undirected graphs. Questions involve applying algorithms like Kruskal's or Prim's, determining properties like the uniqueness or total count of MSTs, and understanding how MSTs are affected by changes to edge weights.",
      "question_ids": [
        "2009-Q.38",
        "2010-50",
        "2011-Q.54",
        "2011-Q.55",
        "2012-Q.29",
        "2014-CS-2-52",
        "2015-40",
        "2015-Q. 43",
        "2016-Q.14",
        "2017-26",
        "2018-47",
        "2020-31",
        "2020-49",
        "2021-CS Q.1",
        "2021-CS-Q.17",
        "2022-Q.49",
        "2024-Q.51",
        "2024-Q.59",
        "2025-Q.18",
        "2025-Q.64",
        "2025-CS2-Q.37"
      ]
    },
    {
      "numerical_type_id": "ALGO-ALGO-TYPE-06",
      "numerical_type_name": "Shortest Path Algorithms",
      "numerical_type_description": "Focuses on single-source and all-pairs shortest path problems in weighted graphs. These questions cover the application and theoretical properties of algorithms like Dijkstra's, Bellman-Ford, and Floyd-Warshall, including their behavior with negative edge weights and their underlying design paradigms.",
      "question_ids": [
        "2009-Q.13",
        "2010-51",
        "2012-Q.40",
        "2013-Q.19",
        "2016-Q.14",
        "2020-40",
        "2021-CS Q.55"
      ]
    },
    {
      "numerical_type_id": "ALGO-ALGO-TYPE-07",
      "numerical_type_name": "Algorithm Design Paradigms",
      "numerical_type_description": "Explores core algorithm design techniques such as Dynamic Programming, Greedy algorithms, and Divide and Conquer. Questions require either identifying the paradigm used by a known algorithm or applying one of these techniques to solve an optimization problem, such as the Longest Common Subsequence (LCS), matrix chain multiplication, or knapsack problems.",
      "question_ids": [
        "2009-Q.53",
        "2009-Q.54",
        "2010-34",
        "2011-Q.25",
        "2011-Q.38",
        "2014-41",
        "2014-CS-2-37",
        "2014-CS-2-38",
        "2015-36",
        "2015-49",
        "2015-Q. 6",
        "2016-Q.35",
        "2016-Q.38",
        "2017-5",
        "2018-31",
        "2018-48",
        "2021-CS Q.26",
        "2023-Q.55",
        "2024-Q.35",
        "2024-Q.42"
      ]
    }
  ]
}