# LLM Data Cleaning Prompt for GATE Question Dataset

You are an expert data scientist tasked with cleaning and standardizing a dataset of GATE (Graduate Aptitude Test in Engineering) Computer Science questions. The dataset contains inconsistencies in naming conventions, formatting, and categorization that need to be resolved for proper analysis.

## INPUT FORMAT
You will receive a JSON array of question objects with the following fields:
- `year`: The exam year (e.g., 2012, 2015, etc.)
- `paper_code`: Always "CS" for Computer Science
- `question_no`: Question number (inconsistent formats like "Q.1", "1", "Q.56", etc.)
- `question_text`: The full question text
- `subject`: Subject category (inconsistent naming)
- `chapter`: Chapter within the subject (highly inconsistent naming)
- `subtopic`: Specific subtopic (may have trailing periods, inconsistent naming)

## CLEANING TASKS

### 1. QUESTION NUMBER STANDARDIZATION
**Rule:** Standardize all question numbers to format "Q.X" where X is the number
**Examples:**
- "Q.1" → "Q.1" (keep as is)
- "1" → "Q.1"
- "Q56" → "Q.56"
- "56" → "Q.56"
- "Q.1 (GA)" → "Q.1"

### 2. SUBJECT STANDARDIZATION
**Rule:** Map all subject variations to these canonical names:

**Standard Subjects:**
- "Algorithms"
- "Compiler Design"
- "Computer Networks"
- "Computer Organization and Architecture"
- "Databases"
- "Digital Logic"
- "Engineering Mathematics"
- "General Aptitude"
- "Operating System"
- "Programming and Data Structures"
- "Theory of Computation"

**Mapping Rules:**
- "Computer Science and Information Technology" → "General Aptitude" (this appears to be a combined subject)
- "Data Structures and Algorithms" → "Programming and Data Structures"
- "System Software and Operating System" → "Operating System"
- "Theory of Computation and Compilers" → "Theory of Computation"
- "OTHER: Cryptography" → "Computer Networks" (cryptography is typically under networks/security)
- "OTHER: Network Security" → "Computer Networks"
- "OTHER: Software Engineering" → "General Aptitude"
- "OTHER: Web Technologies" → "Computer Networks"

### 3. CHAPTER STANDARDIZATION
**Rule:** Standardize chapter names to consistent, clean formats. Remove trailing periods and standardize capitalization.

**Standard Chapter Names:**
- "Algorithms" → "Algorithms"
- "Compiler Design" → "Compiler Design"
- "Computer Networks" → "Computer Networks"
- "Computer Organization and Architecture" → "Computer Organization and Architecture"
- "Databases" → "Databases"
- "Digital Logic" → "Digital Logic"
- "Discrete Mathematics" → "Discrete Mathematics"
- "Engineering Mathematics" → "Engineering Mathematics"
- "General Aptitude" → "General Aptitude"
- "Operating System" → "Operating System"
- "Programming and Data Structures" → "Programming and Data Structures"
- "Theory of Computation" → "Theory of Computation"

**Common Chapter Mappings:**
- "ALU, Data-path and Control Unit" → "Computer Organization and Architecture"
- "ALU, data-path and control unit" → "Computer Organization and Architecture"
- "ALU, data-path and control unit." → "Computer Organization and Architecture"
- "Algorithm design techniques" → "Algorithms"
- "Algorithm design techniques: greedy, dynamic programming and divide-and-conquer" → "Algorithms"
- "Application layer protocols" → "Computer Networks"
- "Application layer protocols: DNS, SMTP, HTTP, FTP, Email" → "Computer Networks"
- "Asymptotic worst case time and space complexity" → "Algorithms"
- "Boolean algebra" → "Digital Logic"
- "Boolean algebra." → "Digital Logic"
- "CPU and I/O scheduling" → "Operating System"
- "CPU and I/O scheduling." → "Operating System"
- "Combinational and sequential circuits" → "Digital Logic"
- "Combinational and sequential circuits." → "Digital Logic"
- "Context-free grammars and push-down automata" → "Theory of Computation"
- "Context-free grammars and push-down automata." → "Theory of Computation"
- "Data link layer" → "Computer Networks"
- "Data link layer: framing, error detection, Medium Access Control, Ethernet bridging" → "Computer Networks"
- "ER-model" → "Databases"
- "ER-model and Relational Model" → "Databases"
- "ER-model. Relational model: relational algebra, tuple calculus, SQL." → "Databases"
- "File organization, indexing (e.g., B and B+ trees)" → "Databases"
- "Graph traversals, minimum spanning trees, shortest paths" → "Algorithms"
- "Graph traversals, minimum spanning trees, shortest paths." → "Algorithms"
- "Graphs: connectivity, matching, colouring" → "Algorithms"
- "Graphs: connectivity, matching, colouring." → "Algorithms"
- "Instruction pipelining, pipeline hazards" → "Computer Organization and Architecture"
- "Integrity constraints, normal forms" → "Databases"
- "Integrity constraints, normal forms." → "Databases"
- "Lexical analysis, parsing, syntax-directed translation" → "Compiler Design"
- "Lexical analysis, parsing, syntax-directed translation." → "Compiler Design"
- "Machine instructions and addressing modes" → "Computer Organization and Architecture"
- "Machine instructions and addressing modes." → "Computer Organization and Architecture"
- "Memory hierarchy: cache, main memory and secondary storage" → "Computer Organization and Architecture"
- "Memory hierarchy: cache, main memory and secondary storage; I/O interface (interrupt and DMA mode)" → "Computer Organization and Architecture"
- "Memory management and virtual memory" → "Operating System"
- "Memory management and virtual memory." → "Operating System"
- "Number representations and computer arithmetic (fixed and floating point)" → "Computer Organization and Architecture"
- "Number representations and computer arithmetic (fixed and floating point)." → "Computer Organization and Architecture"
- "Programming in C" → "Programming and Data Structures"
- "Programming in C." → "Programming and Data Structures"
- "Regular and context-free languages" → "Theory of Computation"
- "Regular and context-free languages, pumping lemma" → "Theory of Computation"
- "Regular and context-free languages, pumping lemma." → "Theory of Computation"
- "Regular expressions and finite automata" → "Theory of Computation"
- "Regular expressions and finite automata." → "Theory of Computation"
- "Relational model" → "Databases"
- "Relational model: relational algebra, tuple calculus, SQL" → "Databases"
- "Relational model: relational algebra, tuple calculus, SQL." → "Databases"
- "Searching, sorting, hashing" → "Algorithms"
- "Searching, sorting, hashing." → "Algorithms"
- "System calls, processes, threads, inter-process communication, concurrency and synchronization" → "Operating System"
- "System calls, processes, threads, inter-process communication, concurrency and synchronization." → "Operating System"
- "Transactions and concurrency control" → "Databases"
- "Transactions and concurrency control." → "Databases"
- "Transport layer" → "Computer Networks"
- "Transport layer: flow control and congestion control, UDP, TCP, sockets" → "Computer Networks"
- "Turing machines and undecidability" → "Theory of Computation"
- "Turing machines and undecidability." → "Theory of Computation"

**Aptitude-specific chapters:**
- "Verbal Ability" → "General Aptitude"
- "Quantitative Aptitude" → "General Aptitude"
- "Analytical Aptitude" → "General Aptitude"
- "Spatial Aptitude" → "General Aptitude"
- "Verbal Aptitude" → "General Aptitude"
- "Numerical Ability" → "General Aptitude"
- "Critical Reasoning" → "General Aptitude"
- "Data Interpretation" → "General Aptitude"

### 4. SUBTOPIC CLEANING
**Rules:**
- Remove trailing periods from all subtopics
- Keep the subtopic name as descriptive as possible but consistent
- If a subtopic is just repeating the chapter name, keep it but clean formatting

## OUTPUT FORMAT
Return a valid JSON array with the same structure but cleaned fields. Do not modify:
- `year`
- `paper_code`
- `question_text`

Only modify the fields mentioned above for cleaning.

## EXAMPLE
**Input:**
```json
{
  "year": 2015,
  "paper_code": "CS",
  "question_no": "50",
  "question_text": "Consider the NPDA...",
  "subject": "Theory of Computation",
  "chapter": "Context-free grammars and push-down automata",
  "subtopic": "Context-free grammars and push-down automata."
}
```

**Output:**
```json
{
  "year": 2015,
  "paper_code": "CS",
  "question_no": "Q.50",
  "question_text": "Consider the NPDA...",
  "subject": "Theory of Computation",
  "chapter": "Theory of Computation",
  "subtopic": "Context-free grammars and push-down automata"
}
```

## PROCESSING INSTRUCTIONS
1. Process each question object individually
2. Apply all cleaning rules consistently
3. Maintain data integrity - do not change question content or meaning
4. Return valid JSON that can be parsed
5. If unsure about a mapping, choose the most appropriate standard category based on the question content
